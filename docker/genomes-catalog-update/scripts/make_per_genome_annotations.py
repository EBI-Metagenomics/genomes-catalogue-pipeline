#!/usr/bin/env python3
# coding=utf-8

import argparse
import logging
import multiprocessing as mp
import os

logging.basicConfig(level=logging.INFO)


def main(ips, eggnog, rep_list, outdir, mmseqs_tsv, cores):
    if not os.path.exists(outdir):
        os.makedirs(outdir)
    # load representative accessions
    with open(rep_list, 'r') as rep_in:
        genome_list = [line.strip().replace('.fa', '') for line in rep_in]
    logging.info('Loaded the representative accessions.')
    # load cluster information
    pool = mp.Pool(cores)
    global clusters
    clusters = dict()
    for chunk_start, chunk_size in make_tsv_chunks(mmseqs_tsv):
        pool.apply_async(process_chunk, (chunk_start, chunk_size, genome_list, mmseqs_tsv), callback=append_values)
    pool.close()
    pool.join()
    logging.info('Loaded cluster information.')
    # separate annotations by genome, load into dictionaries and generate result files
    header_ips, results_ips = load_annotations(ips, clusters)
    print_results(results_ips, header_ips, outdir, 'InterProScan')
    del results_ips
    logging.info('Generated IPS output.')
    header_eggnog, results_eggnog = load_annotations(eggnog, clusters)
    print_results(results_eggnog, header_eggnog, outdir, 'eggNOG')
    logging.info('Generated eggNOG output.')


def make_tsv_chunks(file, size=1024*1024):
    file_end = os.path.getsize(file)
    with open(file, 'rb') as f:
        chunk_end = f.tell()
        while True:
            chunk_start = chunk_end
            f.seek(size, 1)
            f.readline()
            chunk_end = f.tell()
            yield chunk_start, chunk_end - chunk_start
            if chunk_end > file_end:
                break


def process_chunk(chunk_start, chunk_size, genome_list, tsv_file):
    result = list()
    with open(tsv_file) as f:
        f.seek(chunk_start)
        lines = f.read(chunk_size).splitlines()
        for line in lines:
            rep, member = line.strip().split('\t')
            if member.split('_')[0] in genome_list:
                result.append([rep, member])
    return result


def append_values(returned_values):
    if returned_values:
        for pair in returned_values:
            clusters.setdefault(pair[0], set()).add(pair[1])


def print_results(result_dict, header, outdir, tool):
    for acc in result_dict.keys():
        out_path = os.path.join(outdir, '{}_{}.tsv'.format(acc, tool))
        with open(out_path, 'w') as file_out:
            if header:
                file_out.write(header + '\n')
            file_out.write('\n'.join(result_dict[acc]))


def load_annotations(ann_file, clusters):
    ann_result = dict()
    header = ''
    with open(ann_file, 'r') as file_in:
        for line in file_in:
            line = line.strip()
            if line.startswith('#query'):
                header = line
            else:
                rep_protein = line.split('\t')[0]
                if rep_protein in clusters.keys():
                    for member_protein in clusters[rep_protein]:
                        genome = member_protein.split('_')[0]
                        ann_result.setdefault(genome, list()).append(line.replace(rep_protein, member_protein))
    return header, ann_result


def parse_args():
    parser = argparse.ArgumentParser(description='Takes interproscan and eggNOG results for an MMseqs catalog as well '
                                                 'as a list of representative genomes and locations where the results '
                                                 'should be stored and creates individual annotation files for each '
                                                 'representative genome')
    parser.add_argument('-i', '--ips', required=True,
                        help='Path to the interproscan input file')
    parser.add_argument('-e', '--eggnog', required=True,
                        help='Path to the eggNOG input file')
    parser.add_argument('-r', '--rep-list', required=True,
                        help='Path to a file containing species representatives')
    parser.add_argument('-t', '--mmseqs-tsv', required=True,
                        help='Path to the tsv file generated by MMseqs that contains information on protein clusters')
    parser.add_argument('-o', '--outdir', required=True,
                        help='Path to the folder where the results will be stored')
    parser.add_argument('-c', '--cores', required=True, type=int,
                        help='Number of cores to use')
    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()
    main(args.ips, args.eggnog, args.rep_list, args.outdir, args.mmseqs_tsv, args.cores)

