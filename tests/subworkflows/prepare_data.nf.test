nextflow_workflow {

    name "Test Workflow PREPARE_DATA"
    script "subworkflows/prepare_data.nf"
    workflow "PREPARE_DATA"

    test("Should filter and rename genomes") {

        when {
            params {
                input_genomes_dir = "$baseDir/tests/subworkflows/fixtures/genomes"
                genomes_checkm_csv = "$baseDir/tests/subworkflows/fixtures/prepare_data/genomes_checkm.csv"
            }
            workflow {
                """
                input[0] = channel.fromPath("${params.input_genomes_dir}", checkIfExists: true)
                input[1] = channel.fromPath("${params.genomes_checkm_csv}", checkIfExists: true)
                input[2] = channel.empty()
                input[3] = channel.value(0)
                input[4] = channel.value(8)
                input[5] = channel.value("MGYG")
                input[6] = channel.empty()
                input[7] = channel.empty()
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }
    }

    test("Should use the genome_info file") {
        when {
            params {
                input_genomes_dir = "$baseDir/tests/subworkflows/fixtures/genomes"
                genomes_checkm_csv = "$baseDir/tests/subworkflows/fixtures/prepare_data/genomes_checkm.csv"
                per_genome_category_tsv = "$baseDir/tests/subworkflows/fixtures/prepare_data/genome_info.tsv"
            }
            workflow {
                """
                input[0] = channel.fromPath("${params.input_genomes_dir}", checkIfExists: true)
                input[1] = channel.fromPath("${params.genomes_checkm_csv}", checkIfExists: true)
                input[2] = channel.empty()
                input[3] = channel.value(1)
                input[4] = channel.value(8)
                input[5] = channel.value("MGYG")
                input[6] = channel.fromPath("${params.per_genome_category_tsv}", checkIfExists: true)
                input[7] = channel.empty()
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }
    }
}
