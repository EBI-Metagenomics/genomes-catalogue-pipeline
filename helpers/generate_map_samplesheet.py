#!/usr/bin/env python3

import os
import sys
import csv
import argparse
from glob import glob
from tqdm import tqdm

import logging

logging.basicConfig(level=logging.INFO)


def main():
    parser = argparse.ArgumentParser(description='Generate a CSV samplesheet for the mobilome annotation pipeline using '
                                                 'the output of genome catalogue pipeline and VIRify.')
    parser.add_argument('--species-catalogue-folder', required=True,
                        help='Path to the species_catalogue folder (inside the main output directory '
                             'generated by genome catalogue pipeline')
    parser.add_argument('--virify-folder', required=True,
                        help='Path to the completed VIRify output folder')
    parser.add_argument('--outfile', required=True, help='Output CSV filename')
    args = parser.parse_args()
    
    count_virify_gff = 0

    for folder in [args.species_catalogue_folder, args.virify_folder]:
        if not os.path.exists(folder):
            logging.critical('The specified input folder does not exist: {}'.format(folder))
            sys.exit(1)
            
    # Get a list of genomes in the VIRify output folder
    mgyg_folders = [
        name for name in os.listdir(args.virify_folder)
        if os.path.isdir(os.path.join(args.virify_folder, name)) and name.startswith("MGYG")
    ]

    header = ['sample', 'assembly', 'user_proteins_gff', 'virify_gff', 'skip_amrfinder_plus']
    
    with open(args.outfile, "w", newline='') as f_out:
        writer = csv.writer(f_out)
        writer.writerow(header)
        for accession in tqdm(sorted(mgyg_folders)):
            genome_folder_path = os.path.join(args.species_catalogue_folder, accession[:-2], accession, "genome")
            assembly = os.path.abspath(glob(os.path.join(genome_folder_path, '*.fna'))[0])
            user_proteins_gff = os.path.abspath(glob(os.path.join(genome_folder_path, '*_annotated.gff'))[0])
            virify_gff_path = os.path.abspath(os.path.join(args.virify_folder, accession, "08-final", "gff", 
                                                           f"{accession}_virify.gff"))
            virify_gff_record = virify_gff_path if os.path.exists(virify_gff_path) else ""
            if virify_gff_record:
                count_virify_gff += 1
            row = [accession, assembly, user_proteins_gff, virify_gff_record, 'true']
            writer.writerow(row)
    
    logging.info(f"Finished writing {len(mgyg_folders)} records. {count_virify_gff} records have a VIRify GFF.")


if __name__ == '__main__':
    main()