#!/usr/bin/env python3

import argparse
import logging
import re
import sys
import textwrap

logging.basicConfig(level=logging.INFO)


def main(gbk_file, outfile, taxonomy_file):
    accession = gbk_file.split('.')[0]
    species, lineage, taxid = ingest_taxonomy_file(taxonomy_file, accession)
    if not species:
        logging.error("Could not retrieve taxonomy information for genome {}".format(accession))
        sys.exit()
    if lineage.endswith("s__"):
        logging.info("NCBI species for genome {} is unknown. Uniprot import file will not be generated.".
                     format(accession))
    process_file(gbk_file, outfile, taxid, species, lineage)


def ingest_taxonomy_file(taxonomy_file, accession):
    species = lineage = taxid = ""
    with open(taxonomy_file, "r") as file_in:
        for line in file_in:
            if line.startswith(accession):
                _, species, lineage, taxid = line.strip().split("\t")
                return species, lineage, taxid
    return species, lineage, taxid


def format_lineage(taxonomy_lineage):
    # Split the lineage into segments
    segments = taxonomy_lineage.split(';')

    # Remove the species segment
    segments.pop()

    # Extract the names from the segments and format the output
    formatted_lineage = '; '.join([segment.split('__')[1] for segment in segments])

    # Print the formatted lineage with proper indentation and line breaks
    indent = " " * 12  # Adjust the number of spaces for your desired indentation
    lines = []
    line_length = 0
    for segment in formatted_lineage.split("; "):
        if not lines or line_length + len(segment) + 2 > 68:
            lines.append(segment + "; ")
            line_length = len(segment) + 2
        else:
            lines[-1] += segment + "; "
            line_length += len(segment) + 2

    formatted_output = "\n".join([indent + line.rstrip(" ") for line in lines]).rstrip("; ") + "."
    return formatted_output


def process_file(gbk_file, outfile, taxid, species, lineage):
    citation = textwrap.dedent("""\
REFERENCE   1
  AUTHORS   Gurbich,T.A., Almeida,A., Beracochea,M., Burdett,T., Burgin,J.,
            Cochrane,G., Raj,S., Richardson,L., Rogers,A., Sakharova,E.,
            Salazar,G., Finn,R.D. 
  TITLE     MGnify Genomes: a resource for biome-specific microbial genome
	    catalogues. 
  JOURNAL   J. Mol. Biol., 435:168016 (2023)
   PUBMED   36806692\n""")
    with open(gbk_file, "r") as file_in, open(outfile, "w") as file_out:
        for line in file_in:
            if line.startswith("DEFINITION"):
                line = line.replace("Genus species strain strain", species)
                file_out.write(line)
            elif line.startswith("SOURCE") or re.match(r'^\s*\/organism=', line):
                line = line.replace("Genus species", species)
                file_out.write(line)
            elif re.match(r'^\s*ORGANISM', line):
                line = line.replace("Genus species", "{}\n{}".format(species, format_lineage(lineage)))
                file_out.write(line)
                line = file_in.readline()  # skip the next line
                file_out.write(citation)
            elif re.match(r'^\s*\/strain=', line):
                file_out.write("                     /db_xref=\"taxon:{}\"\n".format(taxid))
            elif re.match(r'^\s*\/locus_tag=', line):
                file_out.write(line)
                line = line.replace("/locus_tag=", "/protein_id=")
                file_out.write(line)
            else:
                file_out.write(line)
    
    
def parse_args():
    parser = argparse.ArgumentParser(description="The script takes in a .gbk file generated by Prokka and "
                                                 "modifies it to make it appropriate for Uniprot import.")
    parser.add_argument('-g', '--gbk-file', required=True,
                        help='Path to the gbk file generated by Prokka.')
    parser.add_argument('-o', '--outfile', required=True,
                        help='Path to the output file where the modified file will be stored.')
    parser.add_argument('-t', '--taxonomy-file', required=True,
                        help='Path to the processed taxonomy file generated by preprocess_taxonomy_for_uniprot.py.')
    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()
    main(args.gbk_file, args.outfile, args.taxonomy_file)