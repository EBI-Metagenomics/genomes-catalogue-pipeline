#!/usr/bin/env python3

import argparse
import re
import sys

import pandas as pd


def main(gbk_file, outfile, metadata_file):
    accession = gbk_file.split('.')[0]
    #taxonomy, taxid = get_taxid(metadata_file, accession)
    taxid = "11111"
    ncbi_taxonomy = "Placeholder genus placeholder species"
    outfile = process_file(gbk_file, outfile, taxid, ncbi_taxonomy)


def process_file(gbk_file, outfile, taxid, ncbi_taxonomy):
    citation = """REFERENCE   1
  AUTHORS   Gurbich,T.A., Almeida,A., Beracochea,M., Burdett,T., Burgin,J.,
            Cochrane,G., Raj,S., Richardson,L., Rogers,A., Sakharova,E.,
            Salazar,G., Finn,R.D. 
  TITLE     MGnify Genomes: a resource for biome-specific microbial genome
	    catalogues. 
  JOURNAL   J. Mol. Biol., 168016 (2023)
   PUBMED   36806692\n"""
    # PLACEHOLDER!!!! TODO: replace with proper species extraction
    species = ncbi_taxonomy
    with open(gbk_file, "r") as file_in, open(outfile, "w") as file_out:
        for line in file_in:
            if line.startswith("DEFINITION"):
                line = line.replace("Genus species strain strain", species)
                file_out.write(line)
            elif line.startswith("SOURCE") or re.match(r'^\s*\/organism=', line):
                line = line.replace("Genus species", species)
                file_out.write(line)
            elif re.match(r'^\s*ORGANISM', line):
                line = line.replace("Genus species", species)
                file_out.write(line)
                line = file_in.readline()
                line = line.replace("Unclassified", species)
                file_out.write(line)
                file_out.write(citation)
            elif re.match(r'^\s*\/strain=', line):
                pass
            elif re.match(r'^\s*\/locus_tag=', line):
                file_out.write(line)
                line = line.replace("/locus_tag=", "/protein_id=")
                file_out.write(line)
            else:
                file_out.write(line)
    

def get_taxid(metadata_file, accession):
    taxonomy = get_gtdb_taxonomy(metadata_file, accession)
    print(taxonomy)
    #taxid = convert_taxonomy(taxonomy)


def get_gtdb_taxonomy(metadata_file, accession):
    df = pd.read_csv(metadata_file, sep='\t')
    try:
        row = df[df['Genome'] == accession]
        return row.iloc[0]['Lineage']
    except:
        sys.exit("Cannot find lineage for genome {} in the metadata file".format(accession))
    
    
def parse_args():
    parser = argparse.ArgumentParser(description="The script takes in a .gbk file generated by Prokka and"
                                                 "modifies it to make it appropriate for Uniprot import.")
    parser.add_argument('-g', '--gbk-file', required=True,
                        help='Path to the gbk file generated by Prokka.')
    parser.add_argument('-o', '--output', required=True,
                        help='Path to the output file where the modified file will be stored.')
    parser.add_argument('-m', '--metadata', required=True,
                        help='Path to the metadata table.')
    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()
    main(args.gbk_file, args.output, args.metadata)