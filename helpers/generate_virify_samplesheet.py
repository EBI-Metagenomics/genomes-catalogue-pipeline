import os
import sys
import csv
import argparse
from glob import glob

import logging

logging.basicConfig(level=logging.INFO)


def main():
    parser = argparse.ArgumentParser(description='Generate a CSV samplesheet for VIRify using the output of genome '
                                                 'catalogue pipeline.')
    parser.add_argument('--species-catalogue-folder', required=True,
                        help='Full path to the species_catalogue folder (inside the main output directory '
                             'generated by genome catalogue pipeline')
    parser.add_argument('--output', default='virify_samplesheet.csv', help='Output CSV filename (default: '
                                                                           'virify_samplesheet.csv)')
    args = parser.parse_args()

    base_dir = args.species_catalogue_folder
    output_csv = args.output

    header = ['id', 'assembly', 'fastq_1', 'fastq_2', 'proteins']
    rows = []

    # Traverse two levels down
    for mid_subfolder_level in os.listdir(base_dir):
        mid_subfolder_path = os.path.join(base_dir, mid_subfolder_level)  # This is one level above species rep folders
        if os.path.isdir(mid_subfolder_path):
            for species_folder in os.listdir(mid_subfolder_path):
                species_folder_path = os.path.join(mid_subfolder_path, species_folder)
                genome_path = os.path.join(species_folder_path, 'genome')

                if os.path.isdir(genome_path):
                    fna_files = glob(os.path.join(genome_path, '*.fna'))
                    faa_files = glob(os.path.join(genome_path, '*.faa'))

                    if fna_files and faa_files:
                        row = [
                            species_folder,
                            os.path.abspath(fna_files[0]),
                            '',
                            '',
                            os.path.abspath(faa_files[0])
                        ]
                        rows.append(row)
                    else:
                        logging.error(f"MISSING GENOME OR PROTEIN FILES: {genome_path}")
                        sys.exit()

    # Write the samplesheet
    with open(output_csv, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(header)
        writer.writerows(rows)

    logging.info(f"CSV file '{output_csv}' has been created.")


if __name__ == '__main__':
    main()
